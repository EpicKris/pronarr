/**
 * Log levels to indicate importance of the logged message.
 * Every level corresponds to a certain color.
 * Messages with debug level are only displayed if explicitly enabled.
 */
export declare const enum LogLevel {
    INFO = "info",
    WARN = "warn",
    ERROR = "error",
    DEBUG = "debug"
}
/**
 * Represents a logging device which can be used directly as a function (for info logging)
 * but also has dedicated logging functions for respective logging levels.
 */
export interface Logging {
    /** Prefix */
    prefix: string;
    (message: string, ...parameters: any[]): void;
    /**
     * Info
     * @param message Message.
     * @param parameters Parameters.
     */
    info(message: string, ...parameters: any[]): void;
    /**
     * Warn
     * @param message Message.
     * @param parameters Parameters.
     */
    warn(message: string, ...parameters: any[]): void;
    /**
     * Error
     * @param message Message.
     * @param parameters Parameters.
     */
    error(message: string, ...parameters: any[]): void;
    /**
     * Debug
     * @param message Message.
     * @param parameters Parameters.
     */
    debug(message: string, ...parameters: any[]): void;
    /**
     * Log
     * @param level Level.
     * @param message Message.
     * @param parameters Parameters.
     */
    log(level: LogLevel, message: string, ...parameters: any[]): void;
}
/** Logger */
export declare class Logger {
    /** Internal */
    static readonly internal: Logger;
    /**
     * Global cache of logger instances by name.
     */
    private static readonly loggerCache;
    /** Debug Enabled? */
    private static debugEnabled;
    /** Timestamp Enabled? */
    private static timestampEnabled;
    /** Prefix */
    readonly prefix?: string;
    /**
     * @param prefix Prefix.
     */
    constructor(prefix?: string);
    /**
     * Creates a new logging device with a specified prefix.
     * @param prefix Prefix.
     * @returns Logging.
     */
    static withPrefix(prefix: string): Logging;
    /**
     * Turns on debug level logging. Off by default.
     * @param enabled Enabled?
     */
    static setDebugEnabled(enabled?: boolean): void;
    /**
     * Turns on inclusion of timestamps in log messages. On by default.
     * @param enabled Enabled?
     */
    static setTimestampEnabled(enabled?: boolean): void;
    /**
     * Forces color in logging output, even if it seems like color is unsupported.
     */
    static forceColor(): void;
    /**
     * Info
     * @param message Message.
     * @param parameters Parameters.
     */
    info(message: string, ...parameters: any[]): void;
    /**
     * Warn
     * @param message Message.
     * @param parameters Parameters.
     */
    warn(message: string, ...parameters: any[]): void;
    /**
     * Error
     * @param message Message.
     * @param parameters Parameters.
     */
    error(message: string, ...parameters: any[]): void;
    /**
     * Debug
     * @param message Message.
     * @param parameters Parameters.
     */
    debug(message: string, ...parameters: any[]): void;
    /**
     * Log
     * @param level Level.
     * @param message Message.
     * @param parameters Parameters.
     */
    log(level: LogLevel, message: string, ...parameters: any[]): void;
}
//# sourceMappingURL=logger.d.ts.map