"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = void 0;
const util_1 = require("util");
const chalk_1 = __importDefault(require("chalk"));
/** Logger */
class Logger {
    /**
     * @param prefix Prefix.
     */
    constructor(prefix) {
        this.prefix = prefix;
    }
    /**
     * Creates a new logging device with a specified prefix.
     * @param prefix Prefix.
     * @returns Logging.
     */
    static withPrefix(prefix) {
        const loggerStuff = Logger.loggerCache.get(prefix);
        if (loggerStuff) {
            return loggerStuff;
        }
        else {
            const logger = new Logger(prefix);
            const log = logger.info.bind(logger);
            log.info = logger.info;
            log.warn = logger.warn;
            log.error = logger.error;
            log.debug = logger.debug;
            log.log = logger.log;
            log.prefix = logger.prefix;
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            const logging = log;
            Logger.loggerCache.set(prefix, logging);
            return logging;
        }
    }
    /**
     * Turns on debug level logging. Off by default.
     * @param enabled Enabled?
     */
    static setDebugEnabled(enabled = true) {
        Logger.debugEnabled = enabled;
    }
    /**
     * Turns on inclusion of timestamps in log messages. On by default.
     * @param enabled Enabled?
     */
    static setTimestampEnabled(enabled = true) {
        Logger.timestampEnabled = enabled;
    }
    /**
     * Forces color in logging output, even if it seems like color is unsupported.
     */
    static forceColor() {
        chalk_1.default.level = 1; // `1` - Basic 16 colors support.
    }
    /**
     * Info
     * @param message Message.
     * @param parameters Parameters.
     */
    info(message, ...parameters) {
        this.log("info" /* INFO */, message, ...parameters);
    }
    /**
     * Warn
     * @param message Message.
     * @param parameters Parameters.
     */
    warn(message, ...parameters) {
        this.log("warn" /* WARN */, message, ...parameters);
    }
    /**
     * Error
     * @param message Message.
     * @param parameters Parameters.
     */
    error(message, ...parameters) {
        this.log("error" /* ERROR */, message, ...parameters);
    }
    /**
     * Debug
     * @param message Message.
     * @param parameters Parameters.
     */
    debug(message, ...parameters) {
        if (Logger.debugEnabled) {
            this.log("debug" /* DEBUG */, message, ...parameters);
        }
    }
    /**
     * Log
     * @param level Level.
     * @param message Message.
     * @param parameters Parameters.
     */
    log(level, message, ...parameters) {
        message = util_1.format(message, ...parameters);
        let loggingFunction = console.log;
        switch (level) {
            case "warn" /* WARN */:
                message = chalk_1.default.yellow(message);
                loggingFunction = console.error;
                break;
            case "error" /* ERROR */:
                message = chalk_1.default.red(message);
                loggingFunction = console.error;
                break;
            case "debug" /* DEBUG */:
                message = chalk_1.default.gray(message);
                break;
        }
        if (this.prefix) {
            message = chalk_1.default.cyan(`[${this.prefix}] `) + message;
        }
        if (Logger.timestampEnabled) {
            const date = new Date();
            message = chalk_1.default.white(`[${date.toLocaleString()}] `) + message;
        }
        loggingFunction(message);
    }
}
exports.Logger = Logger;
/** Internal */
Logger.internal = new Logger();
/**
 * Global cache of logger instances by name.
 */
Logger.loggerCache = new Map();
/** Debug Enabled? */
Logger.debugEnabled = false;
/** Timestamp Enabled? */
Logger.timestampEnabled = true;
//# sourceMappingURL=logger.js.map