/// <reference types="node" />
import { ChildProcess, SpawnSyncReturns } from 'child_process';
/**
 * Represents the type of media for an input file.
 */
export declare enum MediaKind {
    /** Movie */
    MOVIE = "Movie",
    /** Music */
    MUSIC = "Music",
    /** Audiobook */
    AUDIOBOOK = "Audiobook",
    /** Music Video */
    MUSIC_VIDEO = "Music Video",
    /** TV Show */
    TV_SHOW = "TV Show",
    /** Booklet */
    BOOKLET = "Booklet",
    /** Rington */
    RINGTONE = "Rightone"
}
/** Command */
export interface SublerCommand {
    /** Command */
    command: string;
    /** Arguments */
    args: string[];
}
/** Subler */
export interface SublerStruct {
    /**
     * The path to the source file.
     */
    source: string;
    /**
     * The path to the destination file.
     */
    dest?: string;
    /**
     * Create chapters preview images.
     */
    chaptersPreview: boolean;
    /**
     * The Subler optimization flag.
     */
    optimize: boolean;
    /**
     * Enable tracks and create altenate groups in the iTunes friendly way.
     */
    organizeGroups: boolean;
    /**
     * 64-bit file (only when dest isn't an existing file).
     */
    bitChunk64: boolean;
    /**
     * The atoms that should be written to the file.
     */
    atoms: Atoms;
    /**
     * The media kind of the file.
     */
    mediaKind?: MediaKind;
}
/** Subler */
export declare class Subler {
    private subler;
    /**
     * Creates a new Subler interface with a set of Atoms that should be set to the the file at the `source`.
     * By default Media Kind is set to `MediaKind.MOVIE` and optimization level is set to true.
     * @param source Source
     * @param atoms Aroms.
     * @returns Subler
     */
    constructor(source: string, atoms: Atoms);
    /**
     * Returns the path to the Subler executeable.
     * Assumes a homebrew installtion by default under `/usr/local/bin/SublerCli`,
     * can be overwritten setting the `SUBLER_CLI_PATH` env variable.
     */
    executable(): string;
    /**
     * Executes the tagging command as a child process, returning a handle to it.
     * @returns Child Process
     */
    spawnTag(): ChildProcess;
    /**
     * Create the subler process command.
     * @returns Subler process command.
     */
    buildTagCommand(): SublerCommand;
    /**
     * Apply the specified metadata to the source file and output it to the specified destination file.
     * @returns Spawn
     */
    tag(): SpawnSyncReturns<Buffer>;
    /**
     * Sets the optimization flag.
     * @param value Value
     * @returns This
     */
    optimise(value: boolean): this;
    /**
     * Media Kind
     * @param kind Media Kind
     * @returns This
     */
    mediaKind(kind: MediaKind): this;
    /**
     * Sets the destination of the output file.
     * @param dest Destination
     * @returns This
     */
    dest(dest: string): this;
    /**
     * Computes the next available path by appending.
     * @param p P
     * @param i I
     * @returns Destination
     */
    private nextAvailablePath;
    /**
     * Finds the next valid destination path,
     * if no dest path is supplied then the destination path is the existing file name suffixed, starting from 0.
     * @returns Destination
     */
    private determineDest;
}
/**
 * Represents a Metadata Media Atom.
 */
export interface AtomStruct {
    /**
     * The Name of the Metadata Atom.
     */
    tag: string;
    /**
     * The Value this atom contains.
     */
    value: string;
}
/** Atom */
export declare class Atom {
    /** Atom */
    private atom;
    /**
     * @param tag Tag
     * @param val Value
     */
    constructor(tag: string, val: string);
    /** Argument */
    arg(): string;
}
/** Builder */
export interface BuilderStruct {
    /** Atoms */
    atoms: Atom[];
}
export declare class Builder {
    /** Inner Atoms */
    inner: Atom[];
    /**
     * Add Atom
     * @param atom Atom
     * @returns This
     */
    addAtom(atom: Atom): this;
    /**
     * Add
     * @param tag Tag
     * @param val Value
     * @returns This
     */
    add(tag: string, val: string): this;
    /**
     * Build
     * @returns Atoms
     */
    build(): AtomsStruct;
    /**
     * Default
     * @returns Builder
     */
    static default(): Builder;
}
/** Atom */
export interface AtomsStruct {
    /**
     * The stored atoms.
     */
    inner: Atom[];
}
/** Atoms */
export declare class Atoms extends Builder {
    /**
     * All valid Metadata Atom tags.
     * @returns Metadata Tags
     */
    metadataTags(): string[];
    /**
     * Arguments for setting the metaflag flag of subler.
     * @returns Arguments
     */
    args(): string[];
    /**
     * Add Atom
     * @param atom Atom
     * @returns This
     */
    addAtom(atom: Atom): this;
    /**
     * Add Atoms
     * @param atoms Atoms
     * @returns This
     */
    addAtoms(atoms: Atoms): this;
    /**
     * Add
     * @param tag Tag
     * @param val Value
     * @returns This
     */
    add(tag: string, val: string): this;
    /**
     * Atoms
     * @returns Atoms
     */
    atoms(): Atom[];
}
/** Atom Tag */
export declare const AtomTag: {
    /** Artist */
    artist: string;
    /** Album Artist */
    albumArtist: string;
    /** Album */
    album: string;
    /** Grouping */
    grouping: string;
    /** Composer */
    composer: string;
    /** Comments */
    comments: string;
    /** Genre */
    genre: string;
    /** Release Date */
    releaseDate: string;
    /** Track Number */
    trackNumber: string;
    /** Disk NNumber */
    diskNumber: string;
    /** Tempo */
    tempo: string;
    /** TV Show */
    tvShow: string;
    /** TV Episode Number */
    tvEpisodeNumber: string;
    /** TV Network */
    tvNetwork: string;
    /** TV Episode ID */
    tvEpisodeId: string;
    /** TV Season */
    tvSeason: string;
    /** Description */
    description: string;
    /** Long Description */
    longDescription: string;
    /** Serious Description */
    seriesDescription: string;
    /** HD Video */
    hdVideo: string;
    /** Rating Annotation */
    ratingAnnotation: string;
    /** Studio */
    studio: string;
    /** Cast */
    cast: string;
    /** Director */
    director: string;
    /** Gapless */
    gapless: string;
    /** Codirector */
    codirector: string;
    /** Producers */
    producers: string;
    /** Screenwriters */
    screenwriters: string;
    /** Lyrics */
    lyrics: string;
    /** Copyright */
    copyright: string;
    /** Encoding Tool */
    encodingTool: string;
    /** Encoded by */
    encoded_by: string;
    /** Keywords */
    keywords: string;
    /** Category */
    category: string;
    /** Content ID */
    contentId: string;
    /** Artist ID */
    artistId: string;
    /** Playlist ID */
    playlistId: string;
    /** Genre ID */
    genreId: string;
    /** Composer ID */
    composerId: string;
    /** XID */
    xid: string;
    /** iTunes Account */
    itunesCccount: string;
    /** iTunes Account Type */
    itunesAccountType: string;
    /** iTunes Country */
    itunesCountry: string;
    /** Track Sub-Title */
    trackSubTitle: string;
    /** Song Description */
    songDescription: string;
    /** Art Director */
    artDirector: string;
    /** Arranger */
    arranger: string;
    /** Lyricist */
    lyricist: string;
    /** Acknowledgement */
    acknowledgement: string;
    /** Conductor */
    conductor: string;
    /** Linear Notes */
    linearNotes: string;
    /** Record Company */
    recordCompany: string;
    /** Original Artist */
    originalArtist: string;
    /** Phonogram Rights */
    phonogramRights: string;
    /** Producer */
    producer: string;
    /** Performer */
    performer: string;
    /** Publisher */
    publisher: string;
    /** Sound Engineer */
    soundEngineer: string;
    /** Soloist */
    soloist: string;
    /** Credits */
    credits: string;
    /** Thanks */
    thanks: string;
    /** Online Extras */
    onlineExtras: string;
    /** Executive Producer */
    executiveproducer: string;
    /** Sort Name */
    sortName: string;
    /** Sort Artist */
    sortArtist: string;
    /** Sort Album Artist */
    sortAlbumArtist: string;
    /** Sort Album */
    sortAlbum: string;
    /** Sort Composer */
    sortComposer: string;
    /** Sort TV Show */
    sortTvShow: string;
    /** Artwork */
    artwork: string;
    /** Name */
    name: string;
    /** Title */
    title: string;
    /** Rating */
    rating: string;
    /** Media Kind */
    mediaKind: string;
};
//# sourceMappingURL=subler.d.ts.map